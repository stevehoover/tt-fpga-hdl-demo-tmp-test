//_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro
//_\source project.tlv 36

//_\SV
   // Include Tiny Tapeout Lab.
   // Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlv_lib/tiny_tapeout_lib.tlv"// Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlv_lib/fpga_includes.tlv"
   // Calculator VIZ.
   // Included URL: "https://raw.githubusercontent.com/efabless/chipcraft---mest-course/main/tlv_lib/calculator_shell_lib.tlv"
//_\source project.tlv 79

//_\SV

// ================================================
// A simple Makerchip Verilog test bench driving random stimulus.
// Modify the module contents to your needs.
// ================================================

// Provide a wrapper module to debounce input signals if requested.

//_\SV



// =======================
// The Tiny Tapeout module
// =======================

module tt_um_example (
    input  wire [7:0] ui_in,    // Dedicated inputs - connected to the input switches
    output wire [7:0] uo_out,   // Dedicated outputs - connected to the 7 segment display
    input  wire       ena,      // will go high when the design is enabled
    input  wire       clk,      // clock
    input  wire       rst_n     // reset_n - low to reset
);
   wire reset = ! rst_n;
//_\source project.tlv 137

// ---------- Generated Code Inlined Here (before 1st \TLV) ----------
// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


genvar digit, input_label, leds, switch;


//
// Signals declared top-level.
//

// For $slideswitch.
logic [7:0] L0_slideswitch_a0;

// For $sseg_decimal_point_n.
logic L0_sseg_decimal_point_n_a0;

// For $sseg_digit_n.
logic [7:0] L0_sseg_digit_n_a0;

// For $sseg_segment_n.
logic [6:0] L0_sseg_segment_n_a0;

// For /fpga_pins/fpga|calc$diff.
logic [7:0] FpgaPins_Fpga_CALC_diff_a1;

// For /fpga_pins/fpga|calc$equals_in.
logic FpgaPins_Fpga_CALC_equals_in_a1,
      FpgaPins_Fpga_CALC_equals_in_a2;

// For /fpga_pins/fpga|calc$op.
logic [1:0] FpgaPins_Fpga_CALC_op_a1;

// For /fpga_pins/fpga|calc$out.
logic [7:0] FpgaPins_Fpga_CALC_out_a1,
            FpgaPins_Fpga_CALC_out_a2;

// For /fpga_pins/fpga|calc$prod.
logic [7:0] FpgaPins_Fpga_CALC_prod_a1;

// For /fpga_pins/fpga|calc$quot.
logic [7:0] FpgaPins_Fpga_CALC_quot_a1;

// For /fpga_pins/fpga|calc$reset.
logic FpgaPins_Fpga_CALC_reset_a0,
      FpgaPins_Fpga_CALC_reset_a1;

// For /fpga_pins/fpga|calc$segments.
logic [6:0] FpgaPins_Fpga_CALC_segments_a1;

// For /fpga_pins/fpga|calc$sum.
logic [7:0] FpgaPins_Fpga_CALC_sum_a1;

// For /fpga_pins/fpga|calc$val1.
logic [7:0] FpgaPins_Fpga_CALC_val1_a1;

// For /fpga_pins/fpga|calc$val2.
logic [7:0] FpgaPins_Fpga_CALC_val2_a1;

// For /fpga_pins/fpga|calc$valid.
logic FpgaPins_Fpga_CALC_valid_a1;




   //
   // Scope: /fpga_pins
   //


      //
      // Scope: /fpga
      //


         //
         // Scope: |calc
         //

            // Staging of $equals_in.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_equals_in_a2 <= FpgaPins_Fpga_CALC_equals_in_a1;

            // Staging of $out.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_out_a2[7:0] <= FpgaPins_Fpga_CALC_out_a1[7:0];

            // Staging of $reset.
            always_ff @(posedge clk) FpgaPins_Fpga_CALC_reset_a1 <= FpgaPins_Fpga_CALC_reset_a0;








//
// Debug Signals
//

   if (1) begin : DEBUG_SIGS_GTKWAVE

      (* keep *) logic [7:0] \@0$slideswitch ;
      assign \@0$slideswitch = L0_slideswitch_a0;
      (* keep *) logic  \@0$sseg_decimal_point_n ;
      assign \@0$sseg_decimal_point_n = L0_sseg_decimal_point_n_a0;
      (* keep *) logic [7:0] \@0$sseg_digit_n ;
      assign \@0$sseg_digit_n = L0_sseg_digit_n_a0;
      (* keep *) logic [6:0] \@0$sseg_segment_n ;
      assign \@0$sseg_segment_n = L0_sseg_segment_n_a0;

      //
      // Scope: /digit[0:0]
      //
      for (digit = 0; digit <= 0; digit++) begin : \/digit 

         //
         // Scope: /leds[7:0]
         //
         for (leds = 0; leds <= 7; leds++) begin : \/leds 
            (* keep *) logic  \@0$viz_lit ;
            assign \@0$viz_lit = L1_Digit[digit].L2_Leds[leds].L2_viz_lit_a0;
         end
      end

      //
      // Scope: /fpga_pins
      //
      if (1) begin : \/fpga_pins 

         //
         // Scope: /fpga
         //
         if (1) begin : \/fpga 

            //
            // Scope: |calc
            //
            if (1) begin : P_calc
               (* keep *) logic [7:0] \@1$diff ;
               assign \@1$diff = FpgaPins_Fpga_CALC_diff_a1;
               (* keep *) logic  \@1$equals_in ;
               assign \@1$equals_in = FpgaPins_Fpga_CALC_equals_in_a1;
               (* keep *) logic [1:0] \@1$op ;
               assign \@1$op = FpgaPins_Fpga_CALC_op_a1;
               (* keep *) logic [7:0] \@1$out ;
               assign \@1$out = FpgaPins_Fpga_CALC_out_a1;
               (* keep *) logic [7:0] \@1$prod ;
               assign \@1$prod = FpgaPins_Fpga_CALC_prod_a1;
               (* keep *) logic [7:0] \@1$quot ;
               assign \@1$quot = FpgaPins_Fpga_CALC_quot_a1;
               (* keep *) logic  \@0$reset ;
               assign \@0$reset = FpgaPins_Fpga_CALC_reset_a0;
               (* keep *) logic [6:0] \@1$segments ;
               assign \@1$segments = FpgaPins_Fpga_CALC_segments_a1;
               (* keep *) logic [7:0] \@1$sum ;
               assign \@1$sum = FpgaPins_Fpga_CALC_sum_a1;
               (* keep *) logic [7:0] \@1$val1 ;
               assign \@1$val1 = FpgaPins_Fpga_CALC_val1_a1;
               (* keep *) logic [7:0] \@1$val2 ;
               assign \@1$val2 = FpgaPins_Fpga_CALC_val2_a1;
               (* keep *) logic  \@1$valid ;
               assign \@1$valid = FpgaPins_Fpga_CALC_valid_a1;
            end
         end
      end

      //
      // Scope: /switch[7:0]
      //
      for (switch = 0; switch <= 7; switch++) begin : \/switch 
         (* keep *) logic  \@0$viz_switch ;
         assign \@0$viz_switch = L1_Switch[switch].L1_viz_switch_a0;
      end


   end

// ---------- Generated Code Ends ----------
//_\TLV
   /* verilator lint_off UNOPTFLAT */
   //_\source project.tlv 131   // Instantiated from project.tlv, 141 as: m5+tt_lab.
      // Connect Tiny Tapeout I/Os to Virtual FPGA Lab.
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlvlib/tinytapeoutlib.tlv 76   // Instantiated from project.tlv, 133 as: m5+tt_connections()
         assign L0_slideswitch_a0[7:0] = ui_in;
         assign L0_sseg_segment_n_a0[6:0] = ~ uo_out[6:0];
         assign L0_sseg_decimal_point_n_a0 = ~ uo_out[7];
         assign L0_sseg_digit_n_a0[7:0] = 8'b11111110;
      //_\end_source
      // Instantiate the Virtual FPGA Lab.
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 307   // Instantiated from project.tlv, 135 as: m5+board(/top, /fpga, 7, $, , calc)
         
         //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 355   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 309 as: m4+thanks(m5__l(309)m5_eval(m5_get(BOARD_THANKS_ARGS)))
            //_/thanks
               
         //_\end_source
         
      
         // Board VIZ.
      
         // Board Image.
         
         //_/fpga_pins
            
            //_/fpga
               //_\source project.tlv 44   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 340 as: m4+calc.
               
                  //_|calc
                     //_@0
                        assign FpgaPins_Fpga_CALC_reset_a0 = reset;
                     //_@1
                        assign FpgaPins_Fpga_CALC_val1_a1[7:0] = FpgaPins_Fpga_CALC_out_a2;
                        assign FpgaPins_Fpga_CALC_val2_a1[7:0] = {4'b0, ui_in[3:0]};
                        assign FpgaPins_Fpga_CALC_op_a1[1:0] = ui_in[5:4];
                        assign FpgaPins_Fpga_CALC_equals_in_a1 = ui_in[7];
                        assign FpgaPins_Fpga_CALC_valid_a1 = FpgaPins_Fpga_CALC_reset_a1 ? 1'b0 : FpgaPins_Fpga_CALC_equals_in_a1 && ! FpgaPins_Fpga_CALC_equals_in_a2;
               
                        assign FpgaPins_Fpga_CALC_sum_a1[7:0] = FpgaPins_Fpga_CALC_val1_a1 + FpgaPins_Fpga_CALC_val2_a1;
                        assign FpgaPins_Fpga_CALC_diff_a1[7:0] = FpgaPins_Fpga_CALC_val1_a1 - FpgaPins_Fpga_CALC_val2_a1;
                        assign FpgaPins_Fpga_CALC_prod_a1[7:0] = FpgaPins_Fpga_CALC_val1_a1 * FpgaPins_Fpga_CALC_val2_a1;
                        assign FpgaPins_Fpga_CALC_quot_a1[7:0] = FpgaPins_Fpga_CALC_val1_a1 / FpgaPins_Fpga_CALC_val2_a1;
               
                        assign FpgaPins_Fpga_CALC_out_a1[7:0] = FpgaPins_Fpga_CALC_reset_a1 ? 8'b0 :
                                    ! FpgaPins_Fpga_CALC_valid_a1 ? FpgaPins_Fpga_CALC_out_a2 :
                                    (FpgaPins_Fpga_CALC_op_a1[1:0] == 2'b00) ? FpgaPins_Fpga_CALC_sum_a1  :
                                    (FpgaPins_Fpga_CALC_op_a1[1:0] == 2'b01) ? FpgaPins_Fpga_CALC_diff_a1 :
                                    (FpgaPins_Fpga_CALC_op_a1[1:0] == 2'b10) ? FpgaPins_Fpga_CALC_prod_a1 :
                                                          FpgaPins_Fpga_CALC_quot_a1;
               
               
               
                        //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 844   // Instantiated from project.tlv, 70 as: m5+sseg_decoder($segments, $out[3:0])
                           assign FpgaPins_Fpga_CALC_segments_a1[6:0] =
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 0) ? 7'b1000000 : // '0'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 1) ? 7'b1111001 : // '1'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 2) ? 7'b0100100 : // '2'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 3) ? 7'b0110000 : // '3'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 4) ? 7'b0011001 : // '4'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 5) ? 7'b0010010 : // '5'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 6) ? 7'b0000010 : // '6'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 7) ? 7'b1111000 : // '7'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 8) ? 7'b0000000 : // '8'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 9) ? 7'b0010000 : // '9'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 10) ? 7'b0001000 : // 'a'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 11) ? 7'b0000011 : // 'b'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 12) ? 7'b1000110 : // 'c'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 13) ? 7'b0100001 : // 'd'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 14) ? 7'b0000110 : // 'e'
                                (FpgaPins_Fpga_CALC_out_a1[3:0] == 15) ? 7'b0001110 : // 'f'
                                7'b1111111 ;                // 'nothing'
                        //_\end_source
                        assign uo_out = {1'b0, ~FpgaPins_Fpga_CALC_segments_a1};
               
               
                  //_\source /raw.githubusercontent.com/efabless/chipcraftmestcourse/main/tlvlib/calculatorshelllib.tlv 4   // Instantiated from project.tlv, 74 as: m5+cal_viz(@1, m5__l(74)m5_call(if,m5_get(in_fpga), /fpga, /top))
                     // Only for Makerchip.
                     
                  //_\end_source
               
                  // Connect Tiny Tapeout outputs. Note that uio_ outputs are not available in the Tiny-Tapeout-3-based FPGA boards.
               
                  
                  
               //_\end_source
      
         // LEDs.
         
      
         // 7-Segment
         //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 395   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 346 as: m4+fpga_sseg.
            for (digit = 0; digit <= 0; digit++) begin : L1_Digit //_/digit
               
               for (leds = 0; leds <= 7; leds++) begin : L2_Leds //_/leds

                  // For $viz_lit.
                  logic L2_viz_lit_a0;

                  assign L2_viz_lit_a0 = (! L0_sseg_digit_n_a0[digit]) && ! ((leds == 7) ? L0_sseg_decimal_point_n_a0 : L0_sseg_segment_n_a0[leds % 7]);
                  
               end
            end
         //_\end_source
      
         // slideswitches
         //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 454   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 349 as: m4+fpga_switch.
            for (switch = 0; switch <= 7; switch++) begin : L1_Switch //_/switch

               // For $viz_switch.
               logic L1_viz_switch_a0;

               assign L1_viz_switch_a0 = L0_slideswitch_a0[switch];
               
            end
         //_\end_source
      
         // pushbuttons
         
      //_\end_source
      // Label the switch inputs [0..7] (1..8 on the physical switch panel) (top-to-bottom).
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/35e36bd144fddd75495d4cbc01c4fc50ac5bde6f/tlvlib/tinytapeoutlib.tlv 82   // Instantiated from project.tlv, 137 as: m5+tt_input_labels_viz.
         for (input_label = 0; input_label <= 7; input_label++) begin : L1_InputLabel //_/input_label
            
         end
      //_\end_source
   //_\end_source

//_\SV
endmodule


// Undefine macros defined by SandPiper.
`undef BOGUS_USE
